// This file was generated by Mendix Modeler 6.10.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package task.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the Task module
	public static void checking_of_borrowing_creation(IContext context, task.proxies.Borrowings _borrowings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Borrowings", _borrowings == null ? null : _borrowings.getMendixObject());
			Core.execute(context, "Task.Checking_of_borrowing_creation", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void depr_Is_name_of_party_id_unique_inside_day(IContext context, task.proxies.Party _party)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Party", _party == null ? null : _party.getMendixObject());
			Core.execute(context, "Task.depr_Is_name_of_party_id_unique_inside_day", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<task.proxies.Borrowings> depr_select_plan_transactions(IContext context, task.proxies.Borrowings _borrowings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Borrowings", _borrowings == null ? null : _borrowings.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Task.depr_select_plan_transactions", params);
			java.util.List<task.proxies.Borrowings> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<task.proxies.Borrowings>();
				for (IMendixObject obj : objs)
					result.add(task.proxies.Borrowings.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<task.proxies.All_information> find_main_debtors_and_lenders(IContext context, task.proxies.Party _party)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Party", _party == null ? null : _party.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Task.Find_main_debtors_and_lenders", params);
			java.util.List<task.proxies.All_information> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<task.proxies.All_information>();
				for (IMendixObject obj : objs)
					result.add(task.proxies.All_information.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean is_date_not_empty(IContext context, boolean _is_date_not_empty, task.proxies.Borrowings _borrowings)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("is_date_not_empty", _is_date_not_empty);
			params.put("Borrowings", _borrowings == null ? null : _borrowings.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Task.is_date_not_empty", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void is_name_of_party_id_unique_inside_day(IContext context, task.proxies.Party _party)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Party", _party == null ? null : _party.getMendixObject());
			Core.execute(context, "Task.Is_name_of_party_id_unique_inside_day", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean is_this_party_existed(IContext context, task.proxies.Party _party)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Party", _party == null ? null : _party.getMendixObject());
			return (java.lang.Boolean)Core.execute(context, "Task.Is_this_party_existed", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void microflow(IContext context, task.proxies.Party _party)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Party", _party == null ? null : _party.getMendixObject());
			Core.execute(context, "Task.Microflow", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void microflow_3(IContext context, task.proxies.Party _party)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Party", _party == null ? null : _party.getMendixObject());
			Core.execute(context, "Task.Microflow_3", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<task.proxies.All_information> select_plan_transactions(IContext context, task.proxies.Party _party)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Party", _party == null ? null : _party.getMendixObject());
			java.util.List<IMendixObject> objs = Core.execute(context, "Task.select_plan_transactions", params);
			java.util.List<task.proxies.All_information> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<task.proxies.All_information>();
				for (IMendixObject obj : objs)
					result.add(task.proxies.All_information.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}